(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = {
    PARTICLE_COUNT: 100,
    MIN_PARTICLE_DIAMETER: 30,
    MAX_PARTICLE_DIAMETER: 100,
    PARTICLE_DECELERATION: 0.92,
    FRAMES: 60,
    BASE_VELOCITY: 0.8,
};

},{}],2:[function(require,module,exports){
var particleEngine = require('./particle-engine');

var container = document.getElementById("container");
var width = container.offsetWidth;
var height = container.offsetHeight;
var canvas = document.createElement("CANVAS");
canvas.setAttribute('width', width);
canvas.setAttribute('height', height);
canvas.setAttribute('style', 'position: absolute; background: -webkit-linear-gradient(left, #00BCD4,#9C27B0);');
container.appendChild(canvas);
particleEngine(canvas);

},{"./particle-engine":4}],3:[function(require,module,exports){
module.exports = function() {

    var cursorX = 0;
    var cursorY = 0;
    var previous_cursorX = 0;
    var previous_cursorY = 0;

    document.onmousemove = function(e){
        cursorX = e.pageX;
        cursorY = e.pageY;
    };

    function update_cursor() {
        previous_cursorX = cursorX;
        previous_cursorY = cursorY;
    }

    function movement() {
        return {
            x: previous_cursorX - cursorX,
            y: previous_cursorY - cursorY,
            pos_x: cursorX,
            pos_y: cursorY
        };
    }

    return {
        update_cursor: update_cursor,
        movement: movement
    };
};

},{}],4:[function(require,module,exports){
var CONSTANTS = require('./constants.js');
var mouse = require('./mouse-event')();
var Particle = require('./particle');

module.exports = function(canvas) {

    const { width, height } = canvas;
    const ctx = canvas.getContext("2d");

    function generateParticles() {
        const particles = new Array();
        for(var i = 0; i < CONSTANTS.PARTICLE_COUNT; i++) {
            particles.push(new Particle(width, height));
        }
        return particles;
    }

    function render(particles) {
        ctx.clearRect(0, 0, width, height);
        for(var i = 0; i < particles.length; i++) {
            var particle = particles[i];
            particle.update_opacity();
            particle.add_mouse_velocity(mouse.movement());
            particle.update_position();
            particle.draw(ctx);
        }
        mouse.update_cursor();
    }

    const particles = generateParticles();
    setInterval(function(){
        render(particles);
    }, 1000 / CONSTANTS.FRAMES);
};

},{"./constants.js":1,"./mouse-event":3,"./particle":5}],5:[function(require,module,exports){
var CONSTANTS = require('./constants.js');

module.exports = function(width, height) {
    this.width = width;
    this.height = height;

    var opacity =  Math.random() / 5;
    var opacity_increase = (Math.random() + 0.5) < 1 ? true : false;
    var minMaxDiameterDifference = CONSTANTS.MAX_PARTICLE_DIAMETER - CONSTANTS.MIN_PARTICLE_DIAMETER;
    var size = CONSTANTS.MIN_PARTICLE_DIAMETER + (Math.random() * minMaxDiameterDifference);
    var areaWidth = CONSTANTS.MAX_PARTICLE_DIAMETER * 2 + this.width;
    var areaHeight = CONSTANTS.MAX_PARTICLE_DIAMETER * 2 + this.height;
    var pos_x = (Math.random() * areaWidth) - CONSTANTS.MAX_PARTICLE_DIAMETER;
    var pos_y = (Math.random() * areaHeight) - CONSTANTS.MAX_PARTICLE_DIAMETER;
    var vel_x = (Math.random() - 0.5) * CONSTANTS.BASE_VELOCITY;
    var vel_y = (Math.random() - 0.5) * CONSTANTS.BASE_VELOCITY;
    var mouse_vel_x = 0;
    var mouse_vel_y = 0;

    function update_opacity() {
        opacity = opacity_increase ? opacity + 0.0005 : opacity - 0.0005;
        if (opacity < 0)
            opacity_increase = true;
        if (opacity > 0.2)
            opacity_increase = false;
    }

    function update_position() {
        var new_pos_x = pos_x + vel_x + mouse_vel_x;
        var new_pos_y = pos_y + vel_y + mouse_vel_y;
        mouse_vel_x *= CONSTANTS.PARTICLE_DECELERATION;
        mouse_vel_y *= CONSTANTS.PARTICLE_DECELERATION;
        pos_x = new_pos_x;
        pos_y = new_pos_y;
        validate_position();
    }

    function add_mouse_velocity(coords) {
        mouse_vel_x += coords.x / 400 / 80 * (size * 2);
        mouse_vel_y += coords.y / 400 / 80 * (size * 2);
        if (circle_hit_detection(pos_x, pos_y, coords.x, coords.y, size)) {
            var new_vel_x = coords.pos_x - pos_x;
            var new_vel_y = coords.pos_y - pos_y;
            mouse_vel_x -= new_vel_x / 20;
            mouse_vel_y -= new_vel_y / 20;
        }
    }

    function circle_hit_detection(center_x, center_y, pos_x, pos_y, size) {
        var dis_x = center_x - pos_x;
        var dis_y = center_y - pos_y;
        var distance = Math.sqrt(dis_x * dis_x + dis_y * dis_y);
        if (distance < (size / 2))
            return true;
        else
            return false;
    }

    function square_hit_detection(center_x, center_y, pos_x, pos_y, size) {
        var min_x = center_x - (size / 2);
        var max_x = center_x + (size / 2);
        var min_y = center_y - (size / 2);
        var max_y = center_y + (size / 2);
        if (pos_x > min_x && pos_x < max_x && pos_y > min_y && pos_y < max_y)
            return true;
        else
            return false;
    }

    function validate_position() {
        if (pos_x < - CONSTANTS.MAX_PARTICLE_DIAMETER)
            pos_x = this.width + CONSTANTS.MAX_PARTICLE_DIAMETER;
        else if (pos_x > (this.width + CONSTANTS.MAX_PARTICLE_DIAMETER))
            pos_x = - CONSTANTS.MAX_PARTICLE_DIAMETER;
        else if (pos_y < - CONSTANTS.MAX_PARTICLE_DIAMETER)
            pos_y = this.height + CONSTANTS.MAX_PARTICLE_DIAMETER;
        else if (pos_y > (this.height + CONSTANTS.MAX_PARTICLE_DIAMETER))
            pos_t = - CONSTANTS.MAX_PARTICLE_DIAMETER;
    }

    function draw(ctx) {
        ctx.beginPath();
        ctx.fillStyle = 'hsla(0, 100%, 100%,'+ opacity +')';
        ctx.arc(pos_x,pos_y,size, 0, Math.PI * 2);
        ctx.fill();
    }

    return {
        opacity: opacity,
        pos_x: pos_x,
        pos_y: pos_y,
        size: size,
        update_opacity: update_opacity,
        update_position: update_position,
        add_mouse_velocity: add_mouse_velocity,
        draw: draw
    };
};

},{"./constants.js":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
